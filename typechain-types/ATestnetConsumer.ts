/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ATestnetConsumerInterface extends utils.Interface {
  contractName: "ATestnetConsumer";
  functions: {
    "acceptOwnership()": FunctionFragment;
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "changeDay()": FunctionFragment;
    "currentPrice()": FunctionFragment;
    "fulfillEthereumChange(bytes32,int256)": FunctionFragment;
    "fulfillEthereumLastMarket(bytes32,bytes32)": FunctionFragment;
    "fulfillEthereumPrice(bytes32,uint256)": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "lastMarket()": FunctionFragment;
    "owner()": FunctionFragment;
    "requestEthereumChange(address,string)": FunctionFragment;
    "requestEthereumLastMarket(address,string)": FunctionFragment;
    "requestEthereumPrice(address,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillEthereumChange",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillEthereumLastMarket",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillEthereumPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestEthereumChange",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEthereumLastMarket",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEthereumPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillEthereumChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillEthereumLastMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillEthereumPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestEthereumChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEthereumLastMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEthereumPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestEthereumChangeFulfilled(bytes32,int256)": EventFragment;
    "RequestEthereumLastMarket(bytes32,bytes32)": EventFragment;
    "RequestEthereumPriceFulfilled(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestEthereumChangeFulfilled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestEthereumLastMarket"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestEthereumPriceFulfilled"
  ): EventFragment;
}

export type ChainlinkCancelledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export type ChainlinkFulfilledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export type ChainlinkRequestedEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RequestEthereumChangeFulfilledEvent = TypedEvent<
  [string, BigNumber],
  { requestId: string; change: BigNumber }
>;

export type RequestEthereumChangeFulfilledEventFilter =
  TypedEventFilter<RequestEthereumChangeFulfilledEvent>;

export type RequestEthereumLastMarketEvent = TypedEvent<
  [string, string],
  { requestId: string; market: string }
>;

export type RequestEthereumLastMarketEventFilter =
  TypedEventFilter<RequestEthereumLastMarketEvent>;

export type RequestEthereumPriceFulfilledEvent = TypedEvent<
  [string, BigNumber],
  { requestId: string; price: BigNumber }
>;

export type RequestEthereumPriceFulfilledEventFilter =
  TypedEventFilter<RequestEthereumPriceFulfilledEvent>;

export interface ATestnetConsumer extends BaseContract {
  contractName: "ATestnetConsumer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ATestnetConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillEthereumChange(
      _requestId: BytesLike,
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillEthereumLastMarket(
      _requestId: BytesLike,
      _market: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillEthereumPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    lastMarket(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requestEthereumChange(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestEthereumLastMarket(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestEthereumPrice(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDay(overrides?: CallOverrides): Promise<BigNumber>;

  currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillEthereumChange(
    _requestId: BytesLike,
    _change: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillEthereumLastMarket(
    _requestId: BytesLike,
    _market: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillEthereumPrice(
    _requestId: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  lastMarket(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  requestEthereumChange(
    _oracle: string,
    _jobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestEthereumLastMarket(
    _oracle: string,
    _jobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestEthereumPrice(
    _oracle: string,
    _jobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDay(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillEthereumChange(
      _requestId: BytesLike,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillEthereumLastMarket(
      _requestId: BytesLike,
      _market: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillEthereumPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    lastMarket(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    requestEthereumChange(
      _oracle: string,
      _jobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestEthereumLastMarket(
      _oracle: string,
      _jobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestEthereumPrice(
      _oracle: string,
      _jobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;

    "RequestEthereumChangeFulfilled(bytes32,int256)"(
      requestId?: BytesLike | null,
      change?: BigNumberish | null
    ): RequestEthereumChangeFulfilledEventFilter;
    RequestEthereumChangeFulfilled(
      requestId?: BytesLike | null,
      change?: BigNumberish | null
    ): RequestEthereumChangeFulfilledEventFilter;

    "RequestEthereumLastMarket(bytes32,bytes32)"(
      requestId?: BytesLike | null,
      market?: BytesLike | null
    ): RequestEthereumLastMarketEventFilter;
    RequestEthereumLastMarket(
      requestId?: BytesLike | null,
      market?: BytesLike | null
    ): RequestEthereumLastMarketEventFilter;

    "RequestEthereumPriceFulfilled(bytes32,uint256)"(
      requestId?: BytesLike | null,
      price?: BigNumberish | null
    ): RequestEthereumPriceFulfilledEventFilter;
    RequestEthereumPriceFulfilled(
      requestId?: BytesLike | null,
      price?: BigNumberish | null
    ): RequestEthereumPriceFulfilledEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDay(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillEthereumChange(
      _requestId: BytesLike,
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillEthereumLastMarket(
      _requestId: BytesLike,
      _market: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillEthereumPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    lastMarket(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requestEthereumChange(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestEthereumLastMarket(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestEthereumPrice(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillEthereumChange(
      _requestId: BytesLike,
      _change: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillEthereumLastMarket(
      _requestId: BytesLike,
      _market: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillEthereumPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestEthereumChange(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestEthereumLastMarket(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestEthereumPrice(
      _oracle: string,
      _jobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
